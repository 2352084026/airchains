#!/bin/bash

# 更新系统包信息
echo "更新系统包信息..."
sudo apt update

# 检查并安装所需的工具
install_if_needed() {
    local package=$1
    if dpkg-query -W "$package" >/dev/null 2>&1; then
        echo "$package 已安装，跳过安装步骤。"
    else
        echo "安装 $package..."
        sudo apt install -y "$package"
    fi
}

install_if_needed build-essential
install_if_needed git
install_if_needed make
install_if_needed jq
install_if_needed curl
install_if_needed clang
install_if_needed pkg-config
install_if_needed libssl-dev
install_if_needed wget

# 检查并安装 Go
if command -v go >/dev/null 2>&1; then
    echo "go 已安装，跳过安装步骤。"
else
    echo "下载并安装 Go..."
    wget -c http://mirrors.aliyun.com/golang/go1.22.4.linux-amd64.tar.gz -O go1.22.4.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz
    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
    export PATH=$PATH:/usr/local/go/bin  # 确保当前脚本的环境变量也更新
    source ~/.bashrc
fi

# 验证安装后的 Go 版本
echo "当前 Go 版本："
go version

# 定义备选 RPC 地址数组
RPC_LIST=("https://junction-testnet-rpc.synergynodes.com/status" "http://airchains-rpc1.kubenode.xyz:43457/status" "https://junction-testnet-rpc.synergynodes.com/status" "https://airchains-rpc.kubenode.xyz/status" "https://airchains-rpc.tws.im/status")
CURRENT_RPC_INDEX=0

# 切换到下一个 RPC 地址
function switch_rpc() {
    CURRENT_RPC_INDEX=$(( (CURRENT_RPC_INDEX + 1) % ${#RPC_LIST[@]} ))
    JSON_RPC=${RPC_LIST[$CURRENT_RPC_INDEX]}
    echo "切换到新的 RPC 地址: $JSON_RPC"
}

# 安装节点
function install_node() {
    sudo apt-get update && sudo apt-get install jq build-essential -y
    cd $HOME
    if [ ! -d "$HOME/wasm-station" ]; then
        git clone https://github.com/airchains-network/wasm-station.git
    fi
    if [ ! -d "$HOME/tracks" ]; then
        git clone https://github.com/airchains-network/tracks.git
    fi
    cd wasm-station
    go mod tidy
    /bin/bash ./scripts/local-setup.sh

    sudo tee /etc/systemd/system/wasmstationd.service > /dev/null << EOF
[Unit]
Description=wasmstationd
After=network.target

[Service]
User=$USER
ExecStart=$HOME/wasm-station/build/wasmstationd start --api.enable
Restart=always
RestartSec=3
LimitNOFILE=10000

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload && \
    sudo systemctl enable wasmstationd && \
    sudo systemctl start wasmstationd
    
    cd
    wget https://github.com/airchains-network/tracks/releases/download/v0.0.2/eigenlayer
    sudo chmod +x eigenlayer
    sudo mv eigenlayer /usr/local/bin/eigenlayer

    # 定义文件路径
    KEY_FILE="$HOME/.eigenlayer/operator_keys/wallet.ecdsa.key.json"
    # 检查文件是否存在
    if [ -f "$KEY_FILE" ];then
        echo "文件 $KEY_FILE 已经存在，删除文件"
        rm -f "$KEY_FILE"
    fi

    # 执行创建密钥命令
    echo "123" | eigenlayer operator keys create --key-type ecdsa --insecure wallet

    sudo rm -rf ~/.tracks
    cd $HOME/tracks
    if [ ! -f "go.mod" ];then
        echo "go.mod 文件不存在，请检查tracks仓库是否正确克隆。"
        exit 1
    fi
    go mod tidy

    # 提示用户输入公钥和节点名
    read -p "请输入Public Key hex: " dakey
    read -p "请输入节点名: " moniker

    # 执行 Go 命令，替换用户输入的值
    go run cmd/main.go init \
        --daRpc "disperser-holesky.eigenda.xyz" \
        --daKey "$dakey" \
        --daType "eigen" \
        --moniker "$moniker" \
        --stationRpc "http://127.0.0.1:26657" \
        --stationAPI "http://127.0.0.1:1317" \
        --stationType "wasm"

    go run cmd/main.go keys junction --accountName wallet --accountPath $HOME/.tracks/junction-accounts/keys

    go run cmd/main.go prover v1WASM

    # 询问用户是否要继续执行
    read -p "是否已经领水完毕要继续执行？(yes/no): " choice

    if [[ "$choice" != "yes" ]];then
        echo "脚本已终止。"
        exit 0
    fi

    # 如果用户选择继续，则执行以下操作
    echo "继续执行脚本..."

    CONFIG_PATH="$HOME/.tracks/config/sequencer.toml"
    WALLET_PATH="$HOME/.tracks/junction-accounts/keys/wallet.wallet.json"

    # 从配置文件中提取 nodeid
    NODE_ID=$(grep 'node_id =' $CONFIG_PATH | awk -F'"' '{print $2}')

    # 从钱包文件中提取 air 开头的钱包地址
    AIR_ADDRESS=$(jq -r '.address' $WALLET_PATH)

    # 获取本机 IP 地址
    LOCAL_IP=$(hostname -I | awk '{print $1}')

    # 取消网络代理
    unset http_proxy
    unset https_proxy

    # 定义其他参数
    INFO="EVM Track"
    BOOTSTRAP_NODE="/ip4/$LOCAL_IP/tcp/2300/p2p/$NODE_ID"

    while true; do
        JSON_RPC=${RPC_LIST[$CURRENT_RPC_INDEX]}
        echo "尝试使用 RPC 地址: $JSON_RPC"

        # 运行 tracks create-station 命令
        create_station_cmd="go run cmd/main.go create-station \
            --accountName wallet \
            --accountPath $HOME/.tracks/junction-accounts/keys \
            --jsonRPC \"$JSON_RPC\" \
            --info \"$INFO\" \
            --tracks \"$AIR_ADDRESS\" \
            --bootstrapNode \"$BOOTSTRAP_NODE\""

        echo "Running command:"
        echo "$create_station_cmd"

        # 执行命令
        eval "$create_station_cmd"

        # 检查 RPC 是否正常
        read -p "RPC 是否正常？(yes/no): " rpc_status
        if [[ "$rpc_status" == "yes" ]];then
            break
        else
            switch_rpc
        fi
    done

    # 创建刷TX脚本
    create_tx_script

    # 查看刷TX脚本的输出
    echo "刷TX脚本正在后台运行。查看刷TX脚本的输出..."
    sleep 5
    cat nohup.out

    # 设置stationd服务并查看日志
    setup_stationd_service
}

# 创建刷TX脚本的函数
function create_tx_script() {
    cd
    addr=$($HOME/wasm-station/build/wasmstationd keys show node --keyring-backend test -a)

    # 提示用户输入延时时间
    read -p "请输入刷TX脚本的延时时间（秒）: " delay_time

    if [[ -z "$delay_time" ]];then
        echo "延时时间不能为空，请重新输入。"
        read -p "请输入刷TX脚本的延时时间（秒）: " delay_time
    fi

    sudo tee spam.sh > /dev/null << EOF
#!/bin/bash

while true; do
  $HOME/wasm-station/build/wasmstationd tx bank send node ${addr} 1stake --from node --chain-id station-1 --keyring-backend test -y
  sleep ${delay_time}  # Add a sleep to avoid overwhelming the system or network
done
EOF

    # 确保脚本有执行权限
    chmod +x spam.sh

    # 后台运行刷TX脚本
    nohup bash spam.sh &
}

# 新增的stationd服务配置和启动部分
function setup_stationd_service() {
    # 检查工作目录是否存在，不存在则创建
    if [ ! -d "$HOME/tracks" ];then
        mkdir -p $HOME/tracks
    fi

    sudo tee /etc/systemd/system/stationd.service > /dev/null << EOF
[Unit]
Description=station track service
After=network-online.target

[Service]
User=$USER
WorkingDirectory=$HOME/tracks/
Environment="PATH=$PATH:/usr/local/go/bin"
ExecStartPre=/bin/sleep 10
ExecStart=/usr/local/go/bin/go run cmd/main.go start
Restart=always
RestartSec=10
LimitNOFILE=65535
TimeoutStopSec=60
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

    # 重新加载 systemd 并启动服务
    sudo systemctl daemon-reload
    sudo systemctl enable stationd
    sudo systemctl start stationd
    echo "stationd 服务已启动。"

    # 添加监控stationd服务日志的功能
    monitor_stationd_logs
}

# 监控stationd服务日志的函数
function monitor_stationd_logs() {
    local last_restart_time=0
    local restart_interval=300  # 5分钟间隔，防止频繁重启
    local last_rollback_time=0  # 上次回滚的时间

    # 定义错误字符串
    ERROR_STRING_1="New Block Found"  # 错误字符串1
    ERROR_STRING_2="ERROR_STRING"     # 错误字符串2
    ERROR_STRING_3="rpc error: code"  # 错误字符串3
    ERROR_STRING_4="error"            # 错误字符串4

    echo "监控 stationd 服务的实时日志..."
    LOG_FILE="$HOME/stationd.log"
    journalctl -u stationd -f -o cat >> "$LOG_FILE" &

    while true; do
        echo "开始检测错误日志..."

        # 检查错误日志
        if tail -n 50 "$LOG_FILE" | grep -q "$ERROR_STRING_1"; then
            echo "检测到错误字符串 $ERROR_STRING_1"
            block_count=$((block_count + 1))
            if [ "$block_count" -ge 25 ]; then
                echo "检测到连续25条 $ERROR_STRING_1 日志，重启 stationd 服务..."
                sudo systemctl restart stationd
                block_count=0
            fi
        else
            block_count=0
        fi

        if tail -n 100 "$LOG_FILE" | grep -q "$ERROR_STRING_2"; then
            echo "检测到错误字符串 $ERROR_STRING_2"
            current_time=$(date +%s)
            if [ $((current_time - last_rollback_time)) -gt $restart_interval ]; then
                echo "错误间隔超过 $restart_interval 秒，更换 RPC 地址并停止 stationd 服务..."
                switch_rpc
                sudo systemctl stop stationd
                cd $HOME/tracks
                go run cmd/main.go rollback
                go run cmd/main.go rollback
                go run cmd/main.go rollback
                sudo systemctl restart stationd
                last_rollback_time=$current_time
            else
                echo "检测到错误日志 $ERROR_STRING_2 ，但回滚间隔时间不足，跳过回滚。"
            fi
        fi

        if tail -n 100 "$LOG_FILE" | grep -q "$ERROR_STRING_3"; then
            echo "检测到错误字符串 $ERROR_STRING_3"
            current_time=$(date +%s)
            if [ $((current_time - last_rollback_time)) -gt $restart_interval ]; then
                echo "错误间隔超过 $restart_interval 秒，更换 RPC 地址并停止 stationd 服务..."
                switch_rpc
                sudo systemctl stop stationd
                cd $HOME/tracks
                go run cmd/main.go rollback
                go run cmd/main.go rollback
                go run cmd/main.go rollback
                sudo systemctl restart stationd
                last_rollback_time=$current_time
            else
                echo "检测到错误日志 $ERROR_STRING_3 ，但回滚间隔时间不足，跳过回滚。"
            fi
        fi

        if tail -n 100 "$LOG_FILE" | grep -q "$ERROR_STRING_4"; then
            echo "检测到错误关键词 $ERROR_STRING_4 ，重新启动 stationd 服务..."
            sudo systemctl restart stationd
        fi

        sleep 60  # 监控间隔时间，以秒为单位，可以根据需要调整
    done
}

# 删除节点
function delete_node() {
    sudo systemctl stop wasmstationd stationd
    sudo systemctl disable wasmstationd stationd
    sudo rm -rf $HOME/wasm-station $HOME/tracks $HOME/.wasmstationd $HOME/.tracks $HOME/.eigenlayer
    sudo rm /etc/systemd/system/wasmstationd.service /etc/systemd/system/stationd.service
    sudo systemctl daemon-reload
    sudo pkill -f wasmstationd
    sudo pkill -f stationd
    echo "节点已删除。"
}

# 日志功能
function evmos_log() {
    journalctl -u evmosd -f
}

function avail_log() {
    journalctl -u availd -f
}

function tracks_log() {
    journalctl -u tracksd -f
}

function stationd_log() {
    sudo journalctl -u stationd -f -o cat
}

function private_key() {
    cd /data/airchains/evm-station/ && /bin/bash ./scripts/local-keys.sh
    cat /root/.avail/identity/identity.toml
    cat $HOME/.tracks/junction-accounts/keys/node.wallet.json
}

function check_avail_address() {
    journalctl -u availd | head
}

function restart() {
    sudo systemctl restart evmosd
    echo "重启evmosd"
    sudo systemctl restart availd
    echo "重启availd"
    sudo systemctl restart tracksd
    echo "重启tracksd"
}

function setgas(){
    sed -i 's/gasFees := fmt.Sprintf("%damf", gas)/gasFees := fmt.Sprintf("%damf", 10*gas)/' "$HOME/tracks/junction/verifyPod.go"
    sed -i 's/gasFees := fmt.Sprintf("%damf", gas)/gasFees := fmt.Sprintf("%damf", 10*gas)/' "$HOME/tracks/junction/validateVRF.go"
    sed -i 's/gasFees := fmt.Sprintf("%damf", gas)/gasFees := fmt.Sprintf("%damf", 15*gas)/' "$HOME/tracks/junction/submitPod.go"
    echo "设置gas"
}

function export_mnemonic() {
    WALLET_PATH="$HOME/.tracks/junction-accounts/keys/wallet.wallet.json"
    if [ -f "$WALLET_PATH" ];then
        echo "钱包文件存在，提取助记词..."
        MNEMONIC=$(jq -r '.mnemonic' "$WALLET_PATH")
        echo "助记词：$MNEMONIC"
    else
        echo "钱包文件不存在，无法提取助记词。"
    fi
}

# 重启 stationd 服务
function restart_stationd() {
    sudo systemctl restart stationd
    echo "stationd 服务已重启。"
}

# 回滚 stationd 配置
function rollback_stationd() {
    sudo systemctl stop stationd
    cd $HOME/tracks
    go run cmd/main.go rollback
    go run cmd/main.go rollback
    go run cmd/main.go rollback
    sudo systemctl restart stationd
    echo "stationd 服务已回滚并重启。"
}

# 主菜单
function main_menu() {
    while true; do
        clear
        echo "请选择要执行的操作:"
        echo "1. 安装节点"
        echo "2. 查看 evmos 状态"
        echo "3. 查看 avail 状态"
        echo "4. 查看 tracks 状态"
        echo "5. 查看 stationd 状态"
        echo "6. 导出所有私钥"
        echo "7. 导出助记词"
        echo "8. 停止脚本"
        echo "9. 删除节点"
        echo "10. 重启"
        echo "11. 重启 stationd"
        echo "12. 回滚 stationd"
        echo "13. 更换 RPC 地址"
        read -p "请输入选项（1-13）: " OPTION

        case $OPTION in
        1) install_node ;;
        2) evmos_log ;;
        3) avail_log ;;
        4) tracks_log ;;
        5) stationd_log ;;
        6) private_key ;;
        7) export_mnemonic ;;
        8) sudo pkill -f spam.sh ;;
        9) delete_node ;;
        10) restart ;;
        11) restart_stationd ;;
        12) rollback_stationd ;;
        13) switch_rpc ;;
        *) echo "无效选项。" ;;
        esac
        echo "按任意键返回主菜单..."
        read -n 1
    done
}

# 显示主菜单
main_menu

